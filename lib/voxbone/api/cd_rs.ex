# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Voxbone.Api.CDRs do
  @moduledoc """
  API calls for all endpoints tagged `CDRs`.
  """

  alias Voxbone.Connection
  import Voxbone.RequestBuilder

  @doc """
  Downloads the requested cdrs archive file with the given name using Mtom.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - file_name (String.t): This is one of the fileNames returned by the listExistingFiles method.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec download_file(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def download_file(connection, file_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/cdrs/cdrsfile/#{file_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  The listExistingFile method allows you to list all the files that are available for download. You should use that method to get the name of the file before you can use the downloadFile method which requires the file name as an input parameter.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.ListExistingFilesResponse{}} on success
  {:error, info} on failure
  """
  @spec list_existing_files(Tesla.Env.client(), keyword()) ::
          {:ok, Voxbone.Model.ListExistingFilesResponse.t()} | {:error, Tesla.Env.t()}
  def list_existing_files(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/cdrs/cdrsfile")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.ListExistingFilesResponse{})
  end

  @doc """
  Sends a request to generate a report with all the cdrs for the given month and year. Note that it is only possible to request the generation of a report for a month set in the past.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (RequestFileCreationRequest): 

  ## Returns

  {:ok, %Voxbone.Model.RequestFileCreationResponse{}} on success
  {:error, info} on failure
  """
  @spec request_file_creation(Tesla.Env.client(), keyword()) ::
          {:ok, Voxbone.Model.RequestFileCreationResponse.t()} | {:error, Tesla.Env.t()}
  def request_file_creation(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/cdrs/cdrsfile/request")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.RequestFileCreationResponse{})
  end

  @doc """
  Sends a request to generate a report with all the cdrs for the given month and year. Note that it is only possible to request the generation of a report for a month set in the past.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - month (String.t): The desired month for the report generation.
  - year (String.t): The desired year for the report generation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.RequestFileCreationResponse{}} on success
  {:error, info} on failure
  """
  @spec request_file_creation_0(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Voxbone.Model.RequestFileCreationResponse.t()} | {:error, Tesla.Env.t()}
  def request_file_creation_0(connection, month, year, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/cdrs/cdrsfile/request/#{year}/#{month}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.RequestFileCreationResponse{})
  end
end
