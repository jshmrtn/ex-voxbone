# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Voxbone.Api.Configuration do
  @moduledoc """
  API calls for all endpoints tagged `Configuration`.
  """

  alias Voxbone.Connection
  import Voxbone.RequestBuilder

  @doc """
  The applyConfiguration method is used to configure one or multiple DIDs with certain settings. The possible settings that can be configured for each DID are described below in the list of input parameters.
  Note: if you get an error message for one DID, then you should consider that none of the DIDs in your request will get the requested configuration and you should resubmit the request with the necessary changes.

  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - body (DidConfigurationRequest): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.DidConfigurationResponse{}} on success
  {:error, info} on failure
  """
  @spec apply_configuration(
          Tesla.Env.client(),
          Voxbone.Model.DidConfigurationRequest.t(),
          keyword()
        ) :: {:ok, Voxbone.Model.DidConfigurationResponse.t()} | {:error, Tesla.Env.t()}
  def apply_configuration(connection, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/configuration/configuration")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.DidConfigurationResponse{})
  end

  @doc """
  The applyDIDConfiguration method is used to configure a single DID with certain settings. This is the only method to apply voxOutInternational configuration changes.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - body (SingleDidConfigurationRequest): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.SingleDidConfigurationResponse{}} on success
  {:error, info} on failure
  """
  @spec apply_did_configuration(
          Tesla.Env.client(),
          Voxbone.Model.SingleDidConfigurationRequest.t(),
          keyword()
        ) :: {:ok, Voxbone.Model.SingleDidConfigurationResponse.t()} | {:error, Tesla.Env.t()}
  def apply_did_configuration(connection, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/configuration/didConfiguration")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.SingleDidConfigurationResponse{})
  end

  @doc """
  Allows you to create an SMS link group. An SMS link group is an entity that contains one or several links. For SMS traffic coming from Voxbone to one of your DIDs, you need to link the DID to the link group so that the traffic can be routed to the appropriate destination. If several links are contained in the link group, the traffic will be load balanced according to the weight parameter defined in the links definition.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (SaveSmsLinkGroupRequest): 

  ## Returns

  {:ok, %Voxbone.Model.SaveSmsLinkGroupResponse{}} on success
  {:error, info} on failure
  """
  @spec create_sms_link_group(Tesla.Env.client(), keyword()) ::
          {:ok, Voxbone.Model.SaveSmsLinkGroupResponse.t()} | {:error, Tesla.Env.t()}
  def create_sms_link_group(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/configuration/smslinkgroup")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.SaveSmsLinkGroupResponse{})
  end

  @doc """
  Allows you to remove one of your capacity groups.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - capacity_group_id (integer()): The ID of one of your existing capacity groups which should be removed.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.DeleteCapacityGroupResponse{}} on success
  {:error, info} on failure
  """
  @spec delete_capacity_group(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, Voxbone.Model.DeleteCapacityGroupResponse.t()} | {:error, Tesla.Env.t()}
  def delete_capacity_group(connection, capacity_group_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/configuration/capacitygroup/#{capacity_group_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.DeleteCapacityGroupResponse{})
  end

  @doc """
  Allows you to remove one of your Fax URIs.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - fax_uri_id (integer()): Indicates the ID of one of your existing Fax URIs which should be removed.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.DeleteFaxUriResponse{}} on success
  {:error, info} on failure
  """
  @spec delete_fax_uri(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, Voxbone.Model.DeleteFaxUriResponse.t()} | {:error, Tesla.Env.t()}
  def delete_fax_uri(connection, fax_uri_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/configuration/faxuri/#{fax_uri_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.DeleteFaxUriResponse{})
  end

  @doc """
  Allows you to delete an SMS link.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - sms_link_id (integer()): The ID of the SMS link that you wish to delete. Note that this operation can impact your service, make sure no DID will be impacted by this operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.DeleteSmsLinkResponse{}} on success
  {:error, info} on failure
  """
  @spec delete_sms_link(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, Voxbone.Model.DeleteSmsLinkResponse.t()} | {:error, Tesla.Env.t()}
  def delete_sms_link(connection, sms_link_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/configuration/smslink/#{sms_link_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.DeleteSmsLinkResponse{})
  end

  @doc """
  Allows you to delete an SMS link group.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - sms_link_group_id (integer()): The ID of the SMS link group that you wish to delete. Note that this operation can impact your service, make sure no DID will be impacted by this operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.DeleteSmsLinkGroupResponse{}} on success
  {:error, info} on failure
  """
  @spec delete_sms_link_group(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, Voxbone.Model.DeleteSmsLinkGroupResponse.t()} | {:error, Tesla.Env.t()}
  def delete_sms_link_group(connection, sms_link_group_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/configuration/smslinkgroup/#{sms_link_group_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.DeleteSmsLinkGroupResponse{})
  end

  @doc """
  Allows you to remove one of your voice URIs.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - voice_uri_id (integer()): Indicates the ID of one of your existing voice URIs which should be removed.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.DeleteVoiceUriResponse{}} on success
  {:error, info} on failure
  """
  @spec delete_voice_uri(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, Voxbone.Model.DeleteVoiceUriResponse.t()} | {:error, Tesla.Env.t()}
  def delete_voice_uri(connection, voice_uri_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/configuration/voiceuri/#{voice_uri_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.DeleteVoiceUriResponse{})
  end

  @doc """
  Allows you to get the capacity group for the given ID


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - capacity_group_id (integer()): The ID of one of your existing capacity groups.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.ListCapacityGroupResponse{}} on success
  {:error, info} on failure
  """
  @spec get_capacity_group(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, Voxbone.Model.ListCapacityGroupResponse.t()} | {:error, Tesla.Env.t()}
  def get_capacity_group(connection, capacity_group_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/configuration/capacitygroup/#{capacity_group_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.ListCapacityGroupResponse{})
  end

  @doc """
  Allows you to get the Fax URI for the specified ID.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - fax_uri_id (integer()): The identifier of the fax uri.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.ListFaxUriResponse{}} on success
  {:error, info} on failure
  """
  @spec get_fax_uri(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, Voxbone.Model.ListFaxUriResponse.t()} | {:error, Tesla.Env.t()}
  def get_fax_uri(connection, fax_uri_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/configuration/faxuri/#{fax_uri_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.ListFaxUriResponse{})
  end

  @doc """
  Allows you to retrieve the SMS Link for the specified ID.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - sms_link_id (integer()): The identifier of the SMS Link
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.ListSmsLinkResponse{}} on success
  {:error, info} on failure
  """
  @spec get_sms_link(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, Voxbone.Model.ListSmsLinkResponse.t()} | {:error, Tesla.Env.t()}
  def get_sms_link(connection, sms_link_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/configuration/smslink/#{sms_link_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.ListSmsLinkResponse{})
  end

  @doc """
  Allows you to retrieve the list of your SMS link groups.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.ListSmsLinkGroupResponse{}} on success
  {:error, info} on failure
  """
  @spec get_sms_link_groups(Tesla.Env.client(), keyword()) ::
          {:ok, Voxbone.Model.ListSmsLinkGroupResponse.t()} | {:error, Tesla.Env.t()}
  def get_sms_link_groups(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/configuration/smslinkgroup")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.ListSmsLinkGroupResponse{})
  end

  @doc """
  Allows you to retrieve the Voice URI for the specified ID.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - voice_uri_id (integer()): The identifier of the Voice URI.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.ListVoiceUriResponse{}} on success
  {:error, info} on failure
  """
  @spec get_voice_uri(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, Voxbone.Model.ListVoiceUriResponse.t()} | {:error, Tesla.Env.t()}
  def get_voice_uri(connection, voice_uri_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/configuration/voiceuri/#{voice_uri_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.ListVoiceUriResponse{})
  end

  @doc """
  Allows you to get the list of your capacity groups.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - page_number (integer()): The page number, starting at 0.
  - page_size (integer()): The page size (max number of entities that are displayed in the response).
  - opts (KeywordList): [optional] Optional parameters
    - :capacity_group_id (integer()): The identifier of the capacity group to search for.
    - :description (String.t): The description of the capacity group.
    - :e164 (String.t): The e164 bound to the capacity group.

  ## Returns

  {:ok, %Voxbone.Model.ListCapacityGroupResponse{}} on success
  {:error, info} on failure
  """
  @spec list_capacity_group(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, Voxbone.Model.ListCapacityGroupResponse.t()} | {:error, Tesla.Env.t()}
  def list_capacity_group(connection, page_number, page_size, opts \\ []) do
    optional_params = %{
      :capacityGroupId => :query,
      :description => :query,
      :e164 => :query
    }

    %{}
    |> method(:get)
    |> url("/configuration/capacitygroup")
    |> add_param(:query, :pageNumber, page_number)
    |> add_param(:query, :pageSize, page_size)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.ListCapacityGroupResponse{})
  end

  @doc """
  Allows you to get the list of your Fax URIs and their details.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - page_number (integer()): The page number, starting at 0.
  - page_size (integer()): The page size (max number of entities that are displayed in the response).
  - opts (KeywordList): [optional] Optional parameters
    - :fax_uri_id (integer()): The identifier of the fax uri.
    - :delivery_method (String.t): This is the delivery method on which you want to filter your list of Fax URIs. The possible values are SMTP and HTTP_POST.
    - :fax_file_format (String.t): This is the file format on which you want to filter your list of Fax URIs. The possible values are Tiff and Pdf.
    - :uri (String.t): This is the URI on which you want to filter your list of Fax URIs.
    - :csid (String.t): This to filter in/out the Fax URIs for which CSID (Called subscriber identification) is enabled.

  ## Returns

  {:ok, %Voxbone.Model.ListFaxUriResponse{}} on success
  {:error, info} on failure
  """
  @spec list_fax_uri(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, Voxbone.Model.ListFaxUriResponse.t()} | {:error, Tesla.Env.t()}
  def list_fax_uri(connection, page_number, page_size, opts \\ []) do
    optional_params = %{
      :faxUriId => :query,
      :deliveryMethod => :query,
      :faxFileFormat => :query,
      :uri => :query,
      :csid => :query
    }

    %{}
    |> method(:get)
    |> url("/configuration/faxuri")
    |> add_param(:query, :pageNumber, page_number)
    |> add_param(:query, :pageSize, page_size)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.ListFaxUriResponse{})
  end

  @doc """
  Allows you to get the list of Voxbone’s POPs (Points Of Presence) and their corresponding IP addresses.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.ListPopResponse{}} on success
  {:error, info} on failure
  """
  @spec list_pop(Tesla.Env.client(), keyword()) ::
          {:ok, Voxbone.Model.ListPopResponse.t()} | {:error, Tesla.Env.t()}
  def list_pop(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/configuration/pop")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.ListPopResponse{})
  end

  @doc """
  Allows you to retrieve the list of your SMS Links.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :sms_link_id (integer()): The identifier of the sms link.
    - :group_id (integer()): This can be used to filter based on the SMS link group and get the list of your SMS links within that SMS link group.
    - :type (String.t): This can be used to filter based on the type (protocol) of SMS links: REST_JSON, SMPP_SMSC, SMPP_ESME, SOAP, SIP, SMTP.
    - :direction (String.t): This can be used to filter your SMS links based on their direction: FROM_VOXBONE, TO_VOXBONE or BIDIRECTIONAL.

  ## Returns

  {:ok, %Voxbone.Model.ListSmsLinkResponse{}} on success
  {:error, info} on failure
  """
  @spec list_sms_link(Tesla.Env.client(), keyword()) ::
          {:ok, Voxbone.Model.ListSmsLinkResponse.t()} | {:error, Tesla.Env.t()}
  def list_sms_link(connection, opts \\ []) do
    optional_params = %{
      :smsLinkId => :query,
      :groupId => :query,
      :type => :query,
      :direction => :query
    }

    %{}
    |> method(:get)
    |> url("/configuration/smslink")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.ListSmsLinkResponse{})
  end

  @doc """
  Allows you to get the list of your Voice URIs and their details.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - page_number (integer()): The page number, starting at 0.
  - page_size (integer()): The page size (max number of entities that are displayed in the response).
  - opts (KeywordList): [optional] Optional parameters
    - :voice_uri_id (integer()): The identifier of the voice uri.
    - :backup_uri_id (integer()): The identifier of the voice uri acting as backup.
    - :voice_uri_protocol (String.t): The protocol to use with this voice uri. The only protocol currently supported for voice is SIP.
    - :uri (String.t): The actual uri where the call will be delivered.
    - :description (String.t): A human-readable description of this uri.

  ## Returns

  {:ok, %Voxbone.Model.ListVoiceUriResponse{}} on success
  {:error, info} on failure
  """
  @spec list_voice_uri(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, Voxbone.Model.ListVoiceUriResponse.t()} | {:error, Tesla.Env.t()}
  def list_voice_uri(connection, page_number, page_size, opts \\ []) do
    optional_params = %{
      :voiceUriId => :query,
      :backupUriId => :query,
      :voiceUriProtocol => :query,
      :uri => :query,
      :description => :query
    }

    %{}
    |> method(:get)
    |> url("/configuration/voiceuri")
    |> add_param(:query, :pageNumber, page_number)
    |> add_param(:query, :pageSize, page_size)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.ListVoiceUriResponse{})
  end

  @doc """
  Allows you to either create a new capacity group or update an existing one. If an existing capacityGroupId is passed in the request, then an update will be performed. If no capacityGroupId is passed, then a new capacity group is created.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - body (SaveCapacityGroupRequest): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.SaveCapacityGroupResponse{}} on success
  {:error, info} on failure
  """
  @spec save_capacity_group(
          Tesla.Env.client(),
          Voxbone.Model.SaveCapacityGroupRequest.t(),
          keyword()
        ) :: {:ok, Voxbone.Model.SaveCapacityGroupResponse.t()} | {:error, Tesla.Env.t()}
  def save_capacity_group(connection, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/configuration/capacitygroup")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.SaveCapacityGroupResponse{})
  end

  @doc """
  Allows you to either create a new Fax URI or update an existing one. If an existing faxUriId is passed in the request, then an update will be performed. If no faxUriId is passed, then a new Fax URI is created.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - body (SaveFaxUriRequest): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.SaveFaxUriResponse{}} on success
  {:error, info} on failure
  """
  @spec save_fax_uri(Tesla.Env.client(), Voxbone.Model.SaveFaxUriRequest.t(), keyword()) ::
          {:ok, Voxbone.Model.SaveFaxUriResponse.t()} | {:error, Tesla.Env.t()}
  def save_fax_uri(connection, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/configuration/faxuri")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.SaveFaxUriResponse{})
  end

  @doc """
  Allows you to create an SMS Link. An SMS link is an entity that defines the direction of the SMS connection, the protocol type, and the connection details.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (SaveSmsLinkRequest): 

  ## Returns

  {:ok, %Voxbone.Model.SaveSmsLinkResponse{}} on success
  {:error, info} on failure
  """
  @spec save_sms_link(Tesla.Env.client(), keyword()) ::
          {:ok, Voxbone.Model.SaveSmsLinkResponse.t()} | {:error, Tesla.Env.t()}
  def save_sms_link(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/configuration/smslink")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.SaveSmsLinkResponse{})
  end

  @doc """
  Allows you to either create a new Voice URI or update an existing one. If an existing voiceUriId is passed in the request, then an update will be performed. If no voiceUriId is passed, then a new Voice URI is created.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - body (SaveVoiceUriRequest): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Voxbone.Model.SaveVoiceUriResponse{}} on success
  {:error, info} on failure
  """
  @spec save_voice_uri(Tesla.Env.client(), Voxbone.Model.SaveVoiceUriRequest.t(), keyword()) ::
          {:ok, Voxbone.Model.SaveVoiceUriResponse.t()} | {:error, Tesla.Env.t()}
  def save_voice_uri(connection, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/configuration/voiceuri")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.SaveVoiceUriResponse{})
  end

  @doc """
  Allows you to update a capacity group.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - capacity_group_id (integer()): The ID of one of your existing capacity groups.
  - opts (KeywordList): [optional] Optional parameters
    - :body (SaveCapacityGroupRequest): 

  ## Returns

  {:ok, %Voxbone.Model.SaveCapacityGroupResponse{}} on success
  {:error, info} on failure
  """
  @spec update_capacity_group(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, Voxbone.Model.SaveCapacityGroupResponse.t()} | {:error, Tesla.Env.t()}
  def update_capacity_group(connection, capacity_group_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/configuration/capacitygroup/#{capacity_group_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.SaveCapacityGroupResponse{})
  end

  @doc """
  Allows you to update an existing Fax URI.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - fax_uri_id (integer()): The identifier of the fax uri.
  - opts (KeywordList): [optional] Optional parameters
    - :body (SaveFaxUriRequest): 

  ## Returns

  {:ok, %Voxbone.Model.SaveFaxUriResponse{}} on success
  {:error, info} on failure
  """
  @spec update_fax_uri(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, Voxbone.Model.SaveFaxUriResponse.t()} | {:error, Tesla.Env.t()}
  def update_fax_uri(connection, fax_uri_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/configuration/faxuri/#{fax_uri_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.SaveFaxUriResponse{})
  end

  @doc """
  Allows you to update an existing SMS Link.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - sms_link_id (integer()): The identifier of the existing SMS Link
  - opts (KeywordList): [optional] Optional parameters
    - :body (SaveSmsLinkRequest): 

  ## Returns

  {:ok, %Voxbone.Model.SaveSmsLinkResponse{}} on success
  {:error, info} on failure
  """
  @spec update_sms_link(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, Voxbone.Model.SaveSmsLinkResponse.t()} | {:error, Tesla.Env.t()}
  def update_sms_link(connection, sms_link_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/configuration/smslink/#{sms_link_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.SaveSmsLinkResponse{})
  end

  @doc """
  Allows you to update an existing Voice URI.


  ## Parameters

  - connection (Voxbone.Connection): Connection to server
  - voice_uri_id (integer()): The identifier of the voice uri.
  - opts (KeywordList): [optional] Optional parameters
    - :body (SaveVoiceUriRequest): 

  ## Returns

  {:ok, %Voxbone.Model.SaveVoiceUriResponse{}} on success
  {:error, info} on failure
  """
  @spec update_voice_uri(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, Voxbone.Model.SaveVoiceUriResponse.t()} | {:error, Tesla.Env.t()}
  def update_voice_uri(connection, voice_uri_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/configuration/voiceuri/#{voice_uri_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Voxbone.Model.SaveVoiceUriResponse{})
  end
end
